// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
const encodings = require('protocol-buffers-encodings')
const varint = encodings.varint
const skip = encodings.skip

const Op = exports.Op = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineOp()

function defineOp () {
  Op.Type = {
    Put: 1,
    Del: 2
  }

  Op.encodingLength = encodingLength
  Op.encode = encode
  Op.decode = decode

  function encodingLength (obj) {
    let length = 0
    if (!defined(obj.type)) throw new Error("type is required")
    var len = encodings.enum.encodingLength(obj.type)
    length += 1 + len
    if (!defined(obj.key)) throw new Error("key is required")
    var len = encodings.string.encodingLength(obj.key)
    length += 1 + len
    if (!defined(obj.value)) throw new Error("value is required")
    var len = encodings.string.encodingLength(obj.value)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    const oldOffset = offset
    if (!defined(obj.type)) throw new Error("type is required")
    buf[offset++] = 8
    encodings.enum.encode(obj.type, buf, offset)
    offset += encodings.enum.encode.bytes
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 18
    encodings.string.encode(obj.key, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.value)) throw new Error("value is required")
    buf[offset++] = 26
    encodings.string.encode(obj.value, buf, offset)
    offset += encodings.string.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    const oldOffset = offset
    const obj = {
      type: 1,
      key: "",
      value: ""
    }
    let found0 = false
    let found1 = false
    let found2 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      const prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      const tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.type = encodings.enum.decode(buf, offset)
        offset += encodings.enum.decode.bytes
        found0 = true
        break
        case 2:
        obj.key = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found1 = true
        break
        case 3:
        obj.value = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found2 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
