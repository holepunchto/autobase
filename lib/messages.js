// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var InputNode = exports.InputNode = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var IndexNode = exports.IndexNode = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Map_string_uint64 = exports.Map_string_uint64 = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineInputNode()
defineIndexNode()
defineMap_string_uint64()

function defineInputNode () {
  InputNode.encodingLength = encodingLength
  InputNode.encode = encode
  InputNode.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.links)) {
      var tmp = Object.keys(obj.links)
      for (var i = 0; i < tmp.length; i++) {
        tmp[i] = {key: tmp[i], value: obj.links[tmp[i]]}
      }
      for (var i = 0; i < tmp.length; i++) {
        if (!defined(tmp[i])) continue
        var len = Map_string_uint64.encodingLength(tmp[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    if (defined(obj.value)) {
      var len = encodings.bytes.encodingLength(obj.value)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.links)) {
      var tmp = Object.keys(obj.links)
      for (var i = 0; i < tmp.length; i++) {
        tmp[i] = {key: tmp[i], value: obj.links[tmp[i]]}
      }
      for (var i = 0; i < tmp.length; i++) {
        if (!defined(tmp[i])) continue
        buf[offset++] = 10
        varint.encode(Map_string_uint64.encodingLength(tmp[i]), buf, offset)
        offset += varint.encode.bytes
        Map_string_uint64.encode(tmp[i], buf, offset)
        offset += Map_string_uint64.encode.bytes
      }
    }
    if (defined(obj.value)) {
      buf[offset++] = 18
      encodings.bytes.encode(obj.value, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      links: {},
      value: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tmp = Map_string_uint64.decode(buf, offset, offset + len)
        obj.links[tmp.key] = tmp.value
        offset += Map_string_uint64.decode.bytes
        break
        case 2:
        obj.value = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineIndexNode () {
  IndexNode.encodingLength = encodingLength
  IndexNode.encode = encode
  IndexNode.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.clock)) {
      var tmp = Object.keys(obj.clock)
      for (var i = 0; i < tmp.length; i++) {
        tmp[i] = {key: tmp[i], value: obj.clock[tmp[i]]}
      }
      for (var i = 0; i < tmp.length; i++) {
        if (!defined(tmp[i])) continue
        var len = Map_string_uint64.encodingLength(tmp[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    if (!defined(obj.key)) throw new Error("key is required")
    var len = encodings.string.encodingLength(obj.key)
    length += 1 + len
    if (!defined(obj.seq)) throw new Error("seq is required")
    var len = encodings.varint.encodingLength(obj.seq)
    length += 1 + len
    if (!defined(obj.batch)) throw new Error("batch is required")
    var len = encodings.varint.encodingLength(obj.batch)
    length += 1 + len
    if (defined(obj.node)) {
      var len = InputNode.encodingLength(obj.node)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.value)) {
      var len = encodings.bytes.encodingLength(obj.value)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.clock)) {
      var tmp = Object.keys(obj.clock)
      for (var i = 0; i < tmp.length; i++) {
        tmp[i] = {key: tmp[i], value: obj.clock[tmp[i]]}
      }
      for (var i = 0; i < tmp.length; i++) {
        if (!defined(tmp[i])) continue
        buf[offset++] = 10
        varint.encode(Map_string_uint64.encodingLength(tmp[i]), buf, offset)
        offset += varint.encode.bytes
        Map_string_uint64.encode(tmp[i], buf, offset)
        offset += Map_string_uint64.encode.bytes
      }
    }
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 18
    encodings.string.encode(obj.key, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.seq)) throw new Error("seq is required")
    buf[offset++] = 24
    encodings.varint.encode(obj.seq, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.batch)) throw new Error("batch is required")
    buf[offset++] = 32
    encodings.varint.encode(obj.batch, buf, offset)
    offset += encodings.varint.encode.bytes
    if (defined(obj.node)) {
      buf[offset++] = 42
      varint.encode(InputNode.encodingLength(obj.node), buf, offset)
      offset += varint.encode.bytes
      InputNode.encode(obj.node, buf, offset)
      offset += InputNode.encode.bytes
    }
    if (defined(obj.value)) {
      buf[offset++] = 50
      encodings.bytes.encode(obj.value, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      clock: {},
      key: "",
      seq: 0,
      batch: 1,
      node: null,
      value: null
    }
    var found1 = false
    var found2 = false
    var found3 = false
    while (true) {
      if (end <= offset) {
        if (!found1 || !found2 || !found3) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tmp = Map_string_uint64.decode(buf, offset, offset + len)
        obj.clock[tmp.key] = tmp.value
        offset += Map_string_uint64.decode.bytes
        break
        case 2:
        obj.key = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found1 = true
        break
        case 3:
        obj.seq = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found2 = true
        break
        case 4:
        obj.batch = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found3 = true
        break
        case 5:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.node = InputNode.decode(buf, offset, offset + len)
        offset += InputNode.decode.bytes
        break
        case 6:
        obj.value = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineMap_string_uint64 () {
  Map_string_uint64.encodingLength = encodingLength
  Map_string_uint64.encode = encode
  Map_string_uint64.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.key)) throw new Error("key is required")
    var len = encodings.string.encodingLength(obj.key)
    length += 1 + len
    if (defined(obj.value)) {
      var len = encodings.varint.encodingLength(obj.value)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 10
    encodings.string.encode(obj.key, buf, offset)
    offset += encodings.string.encode.bytes
    if (defined(obj.value)) {
      buf[offset++] = 16
      encodings.varint.encode(obj.value, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: "",
      value: 0
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        obj.value = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
